// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogSetAuthority extends ethereum.Event {
  get params(): LogSetAuthority__Params {
    return new LogSetAuthority__Params(this);
  }
}

export class LogSetAuthority__Params {
  _event: LogSetAuthority;

  constructor(event: LogSetAuthority) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdded extends ethereum.Event {
  get params(): RoleAdded__Params {
    return new RoleAdded__Params(this);
  }
}

export class RoleAdded__Params {
  _event: RoleAdded;

  constructor(event: RoleAdded) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get role(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class RoleRemoved extends ethereum.Event {
  get params(): RoleRemoved__Params {
    return new RoleRemoved__Params(this);
  }
}

export class RoleRemoved__Params {
  _event: RoleRemoved;

  constructor(event: RoleRemoved) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get role(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(_tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  InterfaceId_ERC165(): Bytes {
    let result = super.call(
      "InterfaceId_ERC165",
      "InterfaceId_ERC165():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_InterfaceId_ERC165(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "InterfaceId_ERC165",
      "InterfaceId_ERC165():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CONTRACT_WATER_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_WATER_ERC20_TOKEN",
      "CONTRACT_WATER_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_WATER_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_WATER_ERC20_TOKEN",
      "CONTRACT_WATER_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(_operator: Address, _role: string): boolean {
    let result = super.call("hasRole", "hasRole(address,string):(bool)", [
      ethereum.Value.fromAddress(_operator),
      ethereum.Value.fromString(_role)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(_operator: Address, _role: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(address,string):(bool)", [
      ethereum.Value.fromAddress(_operator),
      ethereum.Value.fromString(_role)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  CONTRACT_GOLD_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_GOLD_ERC20_TOKEN",
      "CONTRACT_GOLD_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_GOLD_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_GOLD_ERC20_TOKEN",
      "CONTRACT_GOLD_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenOfOwnerByIndex(_owner: Address, _index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    _owner: Address,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CONTRACT_RING_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_RING_ERC20_TOKEN",
      "CONTRACT_RING_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_RING_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_RING_ERC20_TOKEN",
      "CONTRACT_RING_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CONTRACT_TOKEN_LOCATION(): Bytes {
    let result = super.call(
      "CONTRACT_TOKEN_LOCATION",
      "CONTRACT_TOKEN_LOCATION():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_TOKEN_LOCATION(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_TOKEN_LOCATION",
      "CONTRACT_TOKEN_LOCATION():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  exists(_tokenId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(_tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenByIndex(_index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CONTRACT_WOOD_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_WOOD_ERC20_TOKEN",
      "CONTRACT_WOOD_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_WOOD_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_WOOD_ERC20_TOKEN",
      "CONTRACT_WOOD_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CONTRACT_FIRE_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_FIRE_ERC20_TOKEN",
      "CONTRACT_FIRE_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_FIRE_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_FIRE_ERC20_TOKEN",
      "CONTRACT_FIRE_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROLE_AUTH_CONTROLLER(): string {
    let result = super.call(
      "ROLE_AUTH_CONTROLLER",
      "ROLE_AUTH_CONTROLLER():(string)",
      []
    );

    return result[0].toString();
  }

  try_ROLE_AUTH_CONTROLLER(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "ROLE_AUTH_CONTROLLER",
      "ROLE_AUTH_CONTROLLER():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  CONTRACT_LAND_BASE(): Bytes {
    let result = super.call(
      "CONTRACT_LAND_BASE",
      "CONTRACT_LAND_BASE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_LAND_BASE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_LAND_BASE",
      "CONTRACT_LAND_BASE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  CONTRACT_INTERSTELLAR_ENCODER(): Bytes {
    let result = super.call(
      "CONTRACT_INTERSTELLAR_ENCODER",
      "CONTRACT_INTERSTELLAR_ENCODER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_INTERSTELLAR_ENCODER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_INTERSTELLAR_ENCODER",
      "CONTRACT_INTERSTELLAR_ENCODER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CONTRACT_SOIL_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_SOIL_ERC20_TOKEN",
      "CONTRACT_SOIL_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_SOIL_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_SOIL_ERC20_TOKEN",
      "CONTRACT_SOIL_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  CONTRACT_OBJECT_OWNERSHIP(): Bytes {
    let result = super.call(
      "CONTRACT_OBJECT_OWNERSHIP",
      "CONTRACT_OBJECT_OWNERSHIP():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_OBJECT_OWNERSHIP(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_OBJECT_OWNERSHIP",
      "CONTRACT_OBJECT_OWNERSHIP():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  authority(): Address {
    let result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    let result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ROLE_ADMIN(): string {
    let result = super.call("ROLE_ADMIN", "ROLE_ADMIN():(string)", []);

    return result[0].toString();
  }

  try_ROLE_ADMIN(): ethereum.CallResult<string> {
    let result = super.tryCall("ROLE_ADMIN", "ROLE_ADMIN():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintObject(_to: Address, _objectId: BigInt): BigInt {
    let result = super.call(
      "mintObject",
      "mintObject(address,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_objectId)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintObject(_to: Address, _objectId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintObject",
      "mintObject(address,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_objectId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnObject(_to: Address, _objectId: BigInt): BigInt {
    let result = super.call(
      "burnObject",
      "burnObject(address,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_objectId)
      ]
    );

    return result[0].toBigInt();
  }

  try_burnObject(_to: Address, _objectId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnObject",
      "burnObject(address,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_objectId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get _authority(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class AdminRemoveRoleCall extends ethereum.Call {
  get inputs(): AdminRemoveRoleCall__Inputs {
    return new AdminRemoveRoleCall__Inputs(this);
  }

  get outputs(): AdminRemoveRoleCall__Outputs {
    return new AdminRemoveRoleCall__Outputs(this);
  }
}

export class AdminRemoveRoleCall__Inputs {
  _call: AdminRemoveRoleCall;

  constructor(call: AdminRemoveRoleCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _roleName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AdminRemoveRoleCall__Outputs {
  _call: AdminRemoveRoleCall;

  constructor(call: AdminRemoveRoleCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class AdminAddRoleCall extends ethereum.Call {
  get inputs(): AdminAddRoleCall__Inputs {
    return new AdminAddRoleCall__Inputs(this);
  }

  get outputs(): AdminAddRoleCall__Outputs {
    return new AdminAddRoleCall__Outputs(this);
  }
}

export class AdminAddRoleCall__Inputs {
  _call: AdminAddRoleCall;

  constructor(call: AdminAddRoleCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _roleName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AdminAddRoleCall__Outputs {
  _call: AdminAddRoleCall;

  constructor(call: AdminAddRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeContractCall extends ethereum.Call {
  get inputs(): InitializeContractCall__Inputs {
    return new InitializeContractCall__Inputs(this);
  }

  get outputs(): InitializeContractCall__Outputs {
    return new InitializeContractCall__Outputs(this);
  }
}

export class InitializeContractCall__Inputs {
  _call: InitializeContractCall;

  constructor(call: InitializeContractCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeContractCall__Outputs {
  _call: InitializeContractCall;

  constructor(call: InitializeContractCall) {
    this._call = call;
  }
}

export class MintObjectCall extends ethereum.Call {
  get inputs(): MintObjectCall__Inputs {
    return new MintObjectCall__Inputs(this);
  }

  get outputs(): MintObjectCall__Outputs {
    return new MintObjectCall__Outputs(this);
  }
}

export class MintObjectCall__Inputs {
  _call: MintObjectCall;

  constructor(call: MintObjectCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _objectId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintObjectCall__Outputs {
  _call: MintObjectCall;

  constructor(call: MintObjectCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BurnObjectCall extends ethereum.Call {
  get inputs(): BurnObjectCall__Inputs {
    return new BurnObjectCall__Inputs(this);
  }

  get outputs(): BurnObjectCall__Outputs {
    return new BurnObjectCall__Outputs(this);
  }
}

export class BurnObjectCall__Inputs {
  _call: BurnObjectCall;

  constructor(call: BurnObjectCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _objectId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnObjectCall__Outputs {
  _call: BurnObjectCall;

  constructor(call: BurnObjectCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ApproveAndCallCall extends ethereum.Call {
  get inputs(): ApproveAndCallCall__Inputs {
    return new ApproveAndCallCall__Inputs(this);
  }

  get outputs(): ApproveAndCallCall__Outputs {
    return new ApproveAndCallCall__Outputs(this);
  }
}

export class ApproveAndCallCall__Inputs {
  _call: ApproveAndCallCall;

  constructor(call: ApproveAndCallCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _extraData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ApproveAndCallCall__Outputs {
  _call: ApproveAndCallCall;

  constructor(call: ApproveAndCallCall) {
    this._call = call;
  }
}
