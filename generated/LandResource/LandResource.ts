// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class StartMining extends ethereum.Event {
  get params(): StartMining__Params {
    return new StartMining__Params(this);
  }
}

export class StartMining__Params {
  _event: StartMining;

  constructor(event: StartMining) {
    this._event = event;
  }

  get minerTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get landId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _resource(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get strength(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StopMining extends ethereum.Event {
  get params(): StopMining__Params {
    return new StopMining__Params(this);
  }
}

export class StopMining__Params {
  _event: StopMining;

  constructor(event: StopMining) {
    this._event = event;
  }

  get minerTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get landId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _resource(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get strength(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ResourceClaimed extends ethereum.Event {
  get params(): ResourceClaimed__Params {
    return new ResourceClaimed__Params(this);
  }
}

export class ResourceClaimed__Params {
  _event: ResourceClaimed;

  constructor(event: ResourceClaimed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get landTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get goldBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get woodBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get waterBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fireBalance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get soilBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class UpdateMiningStrengthWhenStop extends ethereum.Event {
  get params(): UpdateMiningStrengthWhenStop__Params {
    return new UpdateMiningStrengthWhenStop__Params(this);
  }
}

export class UpdateMiningStrengthWhenStop__Params {
  _event: UpdateMiningStrengthWhenStop;

  constructor(event: UpdateMiningStrengthWhenStop) {
    this._event = event;
  }

  get apostleTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get landId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get strength(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateMiningStrengthWhenStart extends ethereum.Event {
  get params(): UpdateMiningStrengthWhenStart__Params {
    return new UpdateMiningStrengthWhenStart__Params(this);
  }
}

export class UpdateMiningStrengthWhenStart__Params {
  _event: UpdateMiningStrengthWhenStart;

  constructor(event: UpdateMiningStrengthWhenStart) {
    this._event = event;
  }

  get apostleTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get landId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get strength(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StartBarMining extends ethereum.Event {
  get params(): StartBarMining__Params {
    return new StartBarMining__Params(this);
  }
}

export class StartBarMining__Params {
  _event: StartBarMining;

  constructor(event: StartBarMining) {
    this._event = event;
  }

  get barIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get landId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get resource(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get rate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StopBarMining extends ethereum.Event {
  get params(): StopBarMining__Params {
    return new StopBarMining__Params(this);
  }
}

export class StopBarMining__Params {
  _event: StopBarMining;

  constructor(event: StopBarMining) {
    this._event = event;
  }

  get barIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get landId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LandResourceClaimed extends ethereum.Event {
  get params(): LandResourceClaimed__Params {
    return new LandResourceClaimed__Params(this);
  }
}

export class LandResourceClaimed__Params {
  _event: LandResourceClaimed;

  constructor(event: LandResourceClaimed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get landId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get goldBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get woodBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get waterBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fireBalance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get soilBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ItemResourceClaimed extends ethereum.Event {
  get params(): ItemResourceClaimed__Params {
    return new ItemResourceClaimed__Params(this);
  }
}

export class ItemResourceClaimed__Params {
  _event: ItemResourceClaimed;

  constructor(event: ItemResourceClaimed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get itemToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get itemTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get goldBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get woodBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get waterBalance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fireBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get soilBalance(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Equip extends ethereum.Event {
  get params(): Equip__Params {
    return new Equip__Params(this);
  }
}

export class Equip__Params {
  _event: Equip;

  constructor(event: Equip) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get resource(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get staker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Divest extends ethereum.Event {
  get params(): Divest__Params {
    return new Divest__Params(this);
  }
}

export class Divest__Params {
  _event: Divest;

  constructor(event: Divest) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get resource(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get staker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LogSetAuthority extends ethereum.Event {
  get params(): LogSetAuthority__Params {
    return new LogSetAuthority__Params(this);
  }
}

export class LogSetAuthority__Params {
  _event: LogSetAuthority;

  constructor(event: LogSetAuthority) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetOwner extends ethereum.Event {
  get params(): LogSetOwner__Params {
    return new LogSetOwner__Params(this);
  }
}

export class LogSetOwner__Params {
  _event: LogSetOwner;

  constructor(event: LogSetOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LandResource__getBarItemResult {
  value0: Address;
  value1: BigInt;
  value2: Address;

  constructor(value0: Address, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class LandResource__getLandIdByItemResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LandResource__miner2IndexResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class LandResource__landId2BarsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class LandResource__land2ResourceMineStateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class LandResource__itemId2StatusResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class LandResource extends ethereum.SmartContract {
  static bind(address: Address): LandResource {
    return new LandResource("LandResource", address);
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBarsMiningStrength(_landId: BigInt, _resource: Address): BigInt {
    let result = super.call(
      "getBarsMiningStrength",
      "getBarsMiningStrength(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBarsMiningStrength(
    _landId: BigInt,
    _resource: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBarsMiningStrength",
      "getBarsMiningStrength(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resourceReleaseStartTime(): BigInt {
    let result = super.call(
      "resourceReleaseStartTime",
      "resourceReleaseStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_resourceReleaseStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "resourceReleaseStartTime",
      "resourceReleaseStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBarItem(_tokenId: BigInt, _index: BigInt): LandResource__getBarItemResult {
    let result = super.call(
      "getBarItem",
      "getBarItem(uint256,uint256):(address,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return new LandResource__getBarItemResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_getBarItem(
    _tokenId: BigInt,
    _index: BigInt
  ): ethereum.CallResult<LandResource__getBarItemResult> {
    let result = super.tryCall(
      "getBarItem",
      "getBarItem(uint256,uint256):(address,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LandResource__getBarItemResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }

  InterfaceId_ERC165(): Bytes {
    let result = super.call(
      "InterfaceId_ERC165",
      "InterfaceId_ERC165():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_InterfaceId_ERC165(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "InterfaceId_ERC165",
      "InterfaceId_ERC165():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CONTRACT_WATER_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_WATER_ERC20_TOKEN",
      "CONTRACT_WATER_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_WATER_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_WATER_ERC20_TOKEN",
      "CONTRACT_WATER_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CONTRACT_GOLD_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_GOLD_ERC20_TOKEN",
      "CONTRACT_GOLD_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_GOLD_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_GOLD_ERC20_TOKEN",
      "CONTRACT_GOLD_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RATE_PRECISION(): BigInt {
    let result = super.call("RATE_PRECISION", "RATE_PRECISION():(uint128)", []);

    return result[0].toBigInt();
  }

  try_RATE_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RATE_PRECISION",
      "RATE_PRECISION():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_SECONDS(): BigInt {
    let result = super.call("TOTAL_SECONDS", "TOTAL_SECONDS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TOTAL_SECONDS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_SECONDS",
      "TOTAL_SECONDS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  enhanceStrengthRateOf(_resource: Address, _tokenId: BigInt): BigInt {
    let result = super.call(
      "enhanceStrengthRateOf",
      "enhanceStrengthRateOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_enhanceStrengthRateOf(
    _resource: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "enhanceStrengthRateOf",
      "enhanceStrengthRateOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  landWorkingOn(_apostleTokenId: BigInt): BigInt {
    let result = super.call(
      "landWorkingOn",
      "landWorkingOn(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_apostleTokenId)]
    );

    return result[0].toBigInt();
  }

  try_landWorkingOn(_apostleTokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "landWorkingOn",
      "landWorkingOn(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_apostleTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableLandResources(
    _landId: BigInt,
    _resources: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "availableLandResources",
      "availableLandResources(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddressArray(_resources)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_availableLandResources(
    _landId: BigInt,
    _resources: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "availableLandResources",
      "availableLandResources(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddressArray(_resources)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getLandMinedBalance(_landId: BigInt, _resource: Address): BigInt {
    let result = super.call(
      "getLandMinedBalance",
      "getLandMinedBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLandMinedBalance(
    _landId: BigInt,
    _resource: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLandMinedBalance",
      "getLandMinedBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLandIdByItem(
    _item: Address,
    _itemId: BigInt
  ): LandResource__getLandIdByItemResult {
    let result = super.call(
      "getLandIdByItem",
      "getLandIdByItem(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(_item),
        ethereum.Value.fromUnsignedBigInt(_itemId)
      ]
    );

    return new LandResource__getLandIdByItemResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getLandIdByItem(
    _item: Address,
    _itemId: BigInt
  ): ethereum.CallResult<LandResource__getLandIdByItemResult> {
    let result = super.tryCall(
      "getLandIdByItem",
      "getLandIdByItem(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(_item),
        ethereum.Value.fromUnsignedBigInt(_itemId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LandResource__getLandIdByItemResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  CONTRACT_WOOD_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_WOOD_ERC20_TOKEN",
      "CONTRACT_WOOD_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_WOOD_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_WOOD_ERC20_TOKEN",
      "CONTRACT_WOOD_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  maxAmount(): BigInt {
    let result = super.call("maxAmount", "maxAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxAmount", "maxAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CONTRACT_FIRE_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_FIRE_ERC20_TOKEN",
      "CONTRACT_FIRE_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_FIRE_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_FIRE_ERC20_TOKEN",
      "CONTRACT_FIRE_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  miner2Index(param0: BigInt): LandResource__miner2IndexResult {
    let result = super.call(
      "miner2Index",
      "miner2Index(uint256):(uint256,address,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LandResource__miner2IndexResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_miner2Index(
    param0: BigInt
  ): ethereum.CallResult<LandResource__miner2IndexResult> {
    let result = super.tryCall(
      "miner2Index",
      "miner2Index(uint256):(uint256,address,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LandResource__miner2IndexResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  getTotalMiningStrength(_landId: BigInt, _resource: Address): BigInt {
    let result = super.call(
      "getTotalMiningStrength",
      "getTotalMiningStrength(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalMiningStrength(
    _landId: BigInt,
    _resource: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalMiningStrength",
      "getTotalMiningStrength(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CONTRACT_LAND_BASE(): Bytes {
    let result = super.call(
      "CONTRACT_LAND_BASE",
      "CONTRACT_LAND_BASE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_LAND_BASE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_LAND_BASE",
      "CONTRACT_LAND_BASE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  landId2Bars(param0: BigInt, param1: BigInt): LandResource__landId2BarsResult {
    let result = super.call(
      "landId2Bars",
      "landId2Bars(uint256,uint256):(address,address,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new LandResource__landId2BarsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_landId2Bars(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<LandResource__landId2BarsResult> {
    let result = super.tryCall(
      "landId2Bars",
      "landId2Bars(uint256,uint256):(address,address,uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LandResource__landId2BarsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }

  getBarMiningStrength(
    _landId: BigInt,
    _resource: Address,
    _index: BigInt
  ): BigInt {
    let result = super.call(
      "getBarMiningStrength",
      "getBarMiningStrength(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBarMiningStrength(
    _landId: BigInt,
    _resource: Address,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBarMiningStrength",
      "getBarMiningStrength(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FURNACE_ITEM_MINE_FEE(): Bytes {
    let result = super.call(
      "FURNACE_ITEM_MINE_FEE",
      "FURNACE_ITEM_MINE_FEE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_FURNACE_ITEM_MINE_FEE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "FURNACE_ITEM_MINE_FEE",
      "FURNACE_ITEM_MINE_FEE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getMinerOnLand(_landId: BigInt, _resource: Address, _index: BigInt): BigInt {
    let result = super.call(
      "getMinerOnLand",
      "getMinerOnLand(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMinerOnLand(
    _landId: BigInt,
    _resource: Address,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinerOnLand",
      "getMinerOnLand(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CONTRACT_INTERSTELLAR_ENCODER(): Bytes {
    let result = super.call(
      "CONTRACT_INTERSTELLAR_ENCODER",
      "CONTRACT_INTERSTELLAR_ENCODER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_INTERSTELLAR_ENCODER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_INTERSTELLAR_ENCODER",
      "CONTRACT_INTERSTELLAR_ENCODER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  attenPerDay(): BigInt {
    let result = super.call("attenPerDay", "attenPerDay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_attenPerDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("attenPerDay", "attenPerDay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CONTRACT_SOIL_ERC20_TOKEN(): Bytes {
    let result = super.call(
      "CONTRACT_SOIL_ERC20_TOKEN",
      "CONTRACT_SOIL_ERC20_TOKEN():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_SOIL_ERC20_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_SOIL_ERC20_TOKEN",
      "CONTRACT_SOIL_ERC20_TOKEN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  protectPeriod(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "protectPeriod",
      "protectPeriod(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_protectPeriod(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protectPeriod",
      "protectPeriod(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _getMinableBalance(
    _tokenId: BigInt,
    _resource: Address,
    _currentTime: BigInt,
    _lastUpdateTime: BigInt
  ): BigInt {
    let result = super.call(
      "_getMinableBalance",
      "_getMinableBalance(uint256,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_currentTime),
        ethereum.Value.fromUnsignedBigInt(_lastUpdateTime)
      ]
    );

    return result[0].toBigInt();
  }

  try__getMinableBalance(
    _tokenId: BigInt,
    _resource: Address,
    _currentTime: BigInt,
    _lastUpdateTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_getMinableBalance",
      "_getMinableBalance(uint256,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_currentTime),
        ethereum.Value.fromUnsignedBigInt(_lastUpdateTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DENOMINATOR(): BigInt {
    let result = super.call("DENOMINATOR", "DENOMINATOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DENOMINATOR", "DENOMINATOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  enhanceStrengthRateByIndex(
    _resource: Address,
    _tokenId: BigInt,
    _index: BigInt
  ): BigInt {
    let result = super.call(
      "enhanceStrengthRateByIndex",
      "enhanceStrengthRateByIndex(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_enhanceStrengthRateByIndex(
    _resource: Address,
    _tokenId: BigInt,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "enhanceStrengthRateByIndex",
      "enhanceStrengthRateByIndex(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CONTRACT_OBJECT_OWNERSHIP(): Bytes {
    let result = super.call(
      "CONTRACT_OBJECT_OWNERSHIP",
      "CONTRACT_OBJECT_OWNERSHIP():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_OBJECT_OWNERSHIP(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_OBJECT_OWNERSHIP",
      "CONTRACT_OBJECT_OWNERSHIP():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  land2ResourceMineState(
    param0: BigInt
  ): LandResource__land2ResourceMineStateResult {
    let result = super.call(
      "land2ResourceMineState",
      "land2ResourceMineState(uint256):(uint256,uint256,uint256,uint128,uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LandResource__land2ResourceMineStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_land2ResourceMineState(
    param0: BigInt
  ): ethereum.CallResult<LandResource__land2ResourceMineStateResult> {
    let result = super.tryCall(
      "land2ResourceMineState",
      "land2ResourceMineState(uint256):(uint256,uint256,uint256,uint128,uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LandResource__land2ResourceMineStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  CONTRACT_TOKEN_USE(): Bytes {
    let result = super.call(
      "CONTRACT_TOKEN_USE",
      "CONTRACT_TOKEN_USE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_TOKEN_USE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_TOKEN_USE",
      "CONTRACT_TOKEN_USE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getBarsRate(_landId: BigInt, _resource: Address): BigInt {
    let result = super.call(
      "getBarsRate",
      "getBarsRate(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBarsRate(
    _landId: BigInt,
    _resource: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBarsRate",
      "getBarsRate(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CONTRACT_METADATA_TELLER(): Bytes {
    let result = super.call(
      "CONTRACT_METADATA_TELLER",
      "CONTRACT_METADATA_TELLER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_METADATA_TELLER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_METADATA_TELLER",
      "CONTRACT_METADATA_TELLER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  authority(): Address {
    let result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    let result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  availableItemResources(
    _itemToken: Address,
    _itemId: BigInt,
    _resources: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "availableItemResources",
      "availableItemResources(address,uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(_itemToken),
        ethereum.Value.fromUnsignedBigInt(_itemId),
        ethereum.Value.fromAddressArray(_resources)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_availableItemResources(
    _itemToken: Address,
    _itemId: BigInt,
    _resources: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "availableItemResources",
      "availableItemResources(address,uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(_itemToken),
        ethereum.Value.fromUnsignedBigInt(_itemId),
        ethereum.Value.fromAddressArray(_resources)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  itemId2Status(
    param0: Address,
    param1: BigInt
  ): LandResource__itemId2StatusResult {
    let result = super.call(
      "itemId2Status",
      "itemId2Status(address,uint256):(address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new LandResource__itemId2StatusResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_itemId2Status(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<LandResource__itemId2StatusResult> {
    let result = super.tryCall(
      "itemId2Status",
      "itemId2Status(address,uint256):(address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LandResource__itemId2StatusResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  UINT_ITEMBAR_PROTECT_PERIOD(): Bytes {
    let result = super.call(
      "UINT_ITEMBAR_PROTECT_PERIOD",
      "UINT_ITEMBAR_PROTECT_PERIOD():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_UINT_ITEMBAR_PROTECT_PERIOD(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UINT_ITEMBAR_PROTECT_PERIOD",
      "UINT_ITEMBAR_PROTECT_PERIOD():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getItemMinedBalance(
    _itemToken: Address,
    _itemId: BigInt,
    _resource: Address
  ): BigInt {
    let result = super.call(
      "getItemMinedBalance",
      "getItemMinedBalance(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_itemToken),
        ethereum.Value.fromUnsignedBigInt(_itemId),
        ethereum.Value.fromAddress(_resource)
      ]
    );

    return result[0].toBigInt();
  }

  try_getItemMinedBalance(
    _itemToken: Address,
    _itemId: BigInt,
    _resource: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getItemMinedBalance",
      "getItemMinedBalance(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_itemToken),
        ethereum.Value.fromUnsignedBigInt(_itemId),
        ethereum.Value.fromAddress(_resource)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  land2BarRate(param0: BigInt, param1: Address, param2: BigInt): BigInt {
    let result = super.call(
      "land2BarRate",
      "land2BarRate(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_land2BarRate(
    param0: BigInt,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "land2BarRate",
      "land2BarRate(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBarRate(_landId: BigInt, _resource: Address, _index: BigInt): BigInt {
    let result = super.call(
      "getBarRate",
      "getBarRate(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBarRate(
    _landId: BigInt,
    _resource: Address,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBarRate",
      "getBarRate(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLandMiningStrength(_landId: BigInt, _resource: Address): BigInt {
    let result = super.call(
      "getLandMiningStrength",
      "getLandMiningStrength(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLandMiningStrength(
    _landId: BigInt,
    _resource: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLandMiningStrength",
      "getLandMiningStrength(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_landId),
        ethereum.Value.fromAddress(_resource)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReleaseSpeed(_tokenId: BigInt, _resource: Address, _time: BigInt): BigInt {
    let result = super.call(
      "getReleaseSpeed",
      "getReleaseSpeed(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );

    return result[0].toBigInt();
  }

  try_getReleaseSpeed(
    _tokenId: BigInt,
    _resource: Address,
    _time: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReleaseSpeed",
      "getReleaseSpeed(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_resource),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  recoverAttenPerDay(): BigInt {
    let result = super.call(
      "recoverAttenPerDay",
      "recoverAttenPerDay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_recoverAttenPerDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "recoverAttenPerDay",
      "recoverAttenPerDay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isNotProtect(_token: Address, _id: BigInt): boolean {
    let result = super.call(
      "isNotProtect",
      "isNotProtect(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );

    return result[0].toBoolean();
  }

  try_isNotProtect(_token: Address, _id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNotProtect",
      "isNotProtect(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  itemMinedBalance(param0: Address, param1: BigInt, param2: Address): BigInt {
    let result = super.call(
      "itemMinedBalance",
      "itemMinedBalance(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_itemMinedBalance(
    param0: Address,
    param1: BigInt,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "itemMinedBalance",
      "itemMinedBalance(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class UpdateMinerStrengthWhenStopCall extends ethereum.Call {
  get inputs(): UpdateMinerStrengthWhenStopCall__Inputs {
    return new UpdateMinerStrengthWhenStopCall__Inputs(this);
  }

  get outputs(): UpdateMinerStrengthWhenStopCall__Outputs {
    return new UpdateMinerStrengthWhenStopCall__Outputs(this);
  }
}

export class UpdateMinerStrengthWhenStopCall__Inputs {
  _call: UpdateMinerStrengthWhenStopCall;

  constructor(call: UpdateMinerStrengthWhenStopCall) {
    this._call = call;
  }

  get _apostleTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinerStrengthWhenStopCall__Outputs {
  _call: UpdateMinerStrengthWhenStopCall;

  constructor(call: UpdateMinerStrengthWhenStopCall) {
    this._call = call;
  }
}

export class ClaimItemResourceCall extends ethereum.Call {
  get inputs(): ClaimItemResourceCall__Inputs {
    return new ClaimItemResourceCall__Inputs(this);
  }

  get outputs(): ClaimItemResourceCall__Outputs {
    return new ClaimItemResourceCall__Outputs(this);
  }
}

export class ClaimItemResourceCall__Inputs {
  _call: ClaimItemResourceCall;

  constructor(call: ClaimItemResourceCall) {
    this._call = call;
  }

  get _itemToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _itemId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimItemResourceCall__Outputs {
  _call: ClaimItemResourceCall;

  constructor(call: ClaimItemResourceCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class BatchClaimLandResourceCall extends ethereum.Call {
  get inputs(): BatchClaimLandResourceCall__Inputs {
    return new BatchClaimLandResourceCall__Inputs(this);
  }

  get outputs(): BatchClaimLandResourceCall__Outputs {
    return new BatchClaimLandResourceCall__Outputs(this);
  }
}

export class BatchClaimLandResourceCall__Inputs {
  _call: BatchClaimLandResourceCall;

  constructor(call: BatchClaimLandResourceCall) {
    this._call = call;
  }

  get _landTokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BatchClaimLandResourceCall__Outputs {
  _call: BatchClaimLandResourceCall;

  constructor(call: BatchClaimLandResourceCall) {
    this._call = call;
  }
}

export class StopMiningCall extends ethereum.Call {
  get inputs(): StopMiningCall__Inputs {
    return new StopMiningCall__Inputs(this);
  }

  get outputs(): StopMiningCall__Outputs {
    return new StopMiningCall__Outputs(this);
  }
}

export class StopMiningCall__Inputs {
  _call: StopMiningCall;

  constructor(call: StopMiningCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StopMiningCall__Outputs {
  _call: StopMiningCall;

  constructor(call: StopMiningCall) {
    this._call = call;
  }
}

export class DivestCall extends ethereum.Call {
  get inputs(): DivestCall__Inputs {
    return new DivestCall__Inputs(this);
  }

  get outputs(): DivestCall__Outputs {
    return new DivestCall__Outputs(this);
  }
}

export class DivestCall__Inputs {
  _call: DivestCall;

  constructor(call: DivestCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DivestCall__Outputs {
  _call: DivestCall;

  constructor(call: DivestCall) {
    this._call = call;
  }
}

export class MineCall extends ethereum.Call {
  get inputs(): MineCall__Inputs {
    return new MineCall__Inputs(this);
  }

  get outputs(): MineCall__Outputs {
    return new MineCall__Outputs(this);
  }
}

export class MineCall__Inputs {
  _call: MineCall;

  constructor(call: MineCall) {
    this._call = call;
  }

  get _landTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MineCall__Outputs {
  _call: MineCall;

  constructor(call: MineCall) {
    this._call = call;
  }
}

export class SetMaxAmountCall extends ethereum.Call {
  get inputs(): SetMaxAmountCall__Inputs {
    return new SetMaxAmountCall__Inputs(this);
  }

  get outputs(): SetMaxAmountCall__Outputs {
    return new SetMaxAmountCall__Outputs(this);
  }
}

export class SetMaxAmountCall__Inputs {
  _call: SetMaxAmountCall;

  constructor(call: SetMaxAmountCall) {
    this._call = call;
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxAmountCall__Outputs {
  _call: SetMaxAmountCall;

  constructor(call: SetMaxAmountCall) {
    this._call = call;
  }
}

export class StartMiningCall extends ethereum.Call {
  get inputs(): StartMiningCall__Inputs {
    return new StartMiningCall__Inputs(this);
  }

  get outputs(): StartMiningCall__Outputs {
    return new StartMiningCall__Outputs(this);
  }
}

export class StartMiningCall__Inputs {
  _call: StartMiningCall;

  constructor(call: StartMiningCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _landTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _resource(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class StartMiningCall__Outputs {
  _call: StartMiningCall;

  constructor(call: StartMiningCall) {
    this._call = call;
  }
}

export class ActivityStoppedCall extends ethereum.Call {
  get inputs(): ActivityStoppedCall__Inputs {
    return new ActivityStoppedCall__Inputs(this);
  }

  get outputs(): ActivityStoppedCall__Outputs {
    return new ActivityStoppedCall__Outputs(this);
  }
}

export class ActivityStoppedCall__Inputs {
  _call: ActivityStoppedCall;

  constructor(call: ActivityStoppedCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ActivityStoppedCall__Outputs {
  _call: ActivityStoppedCall;

  constructor(call: ActivityStoppedCall) {
    this._call = call;
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get authority_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class EquipCall extends ethereum.Call {
  get inputs(): EquipCall__Inputs {
    return new EquipCall__Inputs(this);
  }

  get outputs(): EquipCall__Outputs {
    return new EquipCall__Outputs(this);
  }
}

export class EquipCall__Inputs {
  _call: EquipCall;

  constructor(call: EquipCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _resource(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class EquipCall__Outputs {
  _call: EquipCall;

  constructor(call: EquipCall) {
    this._call = call;
  }
}

export class UpdateMinerStrengthWhenStartCall extends ethereum.Call {
  get inputs(): UpdateMinerStrengthWhenStartCall__Inputs {
    return new UpdateMinerStrengthWhenStartCall__Inputs(this);
  }

  get outputs(): UpdateMinerStrengthWhenStartCall__Outputs {
    return new UpdateMinerStrengthWhenStartCall__Outputs(this);
  }
}

export class UpdateMinerStrengthWhenStartCall__Inputs {
  _call: UpdateMinerStrengthWhenStartCall;

  constructor(call: UpdateMinerStrengthWhenStartCall) {
    this._call = call;
  }

  get _apostleTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinerStrengthWhenStartCall__Outputs {
  _call: UpdateMinerStrengthWhenStartCall;

  constructor(call: UpdateMinerStrengthWhenStartCall) {
    this._call = call;
  }
}

export class InitializeContractCall extends ethereum.Call {
  get inputs(): InitializeContractCall__Inputs {
    return new InitializeContractCall__Inputs(this);
  }

  get outputs(): InitializeContractCall__Outputs {
    return new InitializeContractCall__Outputs(this);
  }
}

export class InitializeContractCall__Inputs {
  _call: InitializeContractCall;

  constructor(call: InitializeContractCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _resourceReleaseStartTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitializeContractCall__Outputs {
  _call: InitializeContractCall;

  constructor(call: InitializeContractCall) {
    this._call = call;
  }
}

export class SetMaxMinersCall extends ethereum.Call {
  get inputs(): SetMaxMinersCall__Inputs {
    return new SetMaxMinersCall__Inputs(this);
  }

  get outputs(): SetMaxMinersCall__Outputs {
    return new SetMaxMinersCall__Outputs(this);
  }
}

export class SetMaxMinersCall__Inputs {
  _call: SetMaxMinersCall;

  constructor(call: SetMaxMinersCall) {
    this._call = call;
  }

  get _maxMiners(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxMinersCall__Outputs {
  _call: SetMaxMinersCall;

  constructor(call: SetMaxMinersCall) {
    this._call = call;
  }
}

export class BatchStartMiningCall extends ethereum.Call {
  get inputs(): BatchStartMiningCall__Inputs {
    return new BatchStartMiningCall__Inputs(this);
  }

  get outputs(): BatchStartMiningCall__Outputs {
    return new BatchStartMiningCall__Outputs(this);
  }
}

export class BatchStartMiningCall__Inputs {
  _call: BatchStartMiningCall;

  constructor(call: BatchStartMiningCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _landTokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _resources(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class BatchStartMiningCall__Outputs {
  _call: BatchStartMiningCall;

  constructor(call: BatchStartMiningCall) {
    this._call = call;
  }
}

export class ClaimLandResourceCall extends ethereum.Call {
  get inputs(): ClaimLandResourceCall__Inputs {
    return new ClaimLandResourceCall__Inputs(this);
  }

  get outputs(): ClaimLandResourceCall__Outputs {
    return new ClaimLandResourceCall__Outputs(this);
  }
}

export class ClaimLandResourceCall__Inputs {
  _call: ClaimLandResourceCall;

  constructor(call: ClaimLandResourceCall) {
    this._call = call;
  }

  get _landId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimLandResourceCall__Outputs {
  _call: ClaimLandResourceCall;

  constructor(call: ClaimLandResourceCall) {
    this._call = call;
  }
}
