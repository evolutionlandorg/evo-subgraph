// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get reward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EvolutionTeller extends ethereum.SmartContract {
  static bind(address: Address): EvolutionTeller {
    return new EvolutionTeller("EvolutionTeller", address);
  }

  CONTRACT_INTERSTELLAR_ENCODER(): Bytes {
    let result = super.call(
      "CONTRACT_INTERSTELLAR_ENCODER",
      "CONTRACT_INTERSTELLAR_ENCODER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_INTERSTELLAR_ENCODER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_INTERSTELLAR_ENCODER",
      "CONTRACT_INTERSTELLAR_ENCODER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CONTRACT_OBJECT_OWNERSHIP(): Bytes {
    let result = super.call(
      "CONTRACT_OBJECT_OWNERSHIP",
      "CONTRACT_OBJECT_OWNERSHIP():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTRACT_OBJECT_OWNERSHIP(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_OBJECT_OWNERSHIP",
      "CONTRACT_OBJECT_OWNERSHIP():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DURATION(): BigInt {
    let result = super.call("DURATION", "DURATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DURATION", "DURATION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _owner(): Address {
    let result = super.call("_owner", "_owner():(address)", []);

    return result[0].toAddress();
  }

  try__owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("_owner", "_owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  apostleVoteRate(): BigInt {
    let result = super.call(
      "apostleVoteRate",
      "apostleVoteRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_apostleVoteRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "apostleVoteRate",
      "apostleVoteRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfApostleOwner(_account: Address): BigInt {
    let result = super.call(
      "balanceOfApostleOwner",
      "balanceOfApostleOwner(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfApostleOwner(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfApostleOwner",
      "balanceOfApostleOwner(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfLandOwner(_account: Address): BigInt {
    let result = super.call(
      "balanceOfLandOwner",
      "balanceOfLandOwner(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfLandOwner(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfLandOwner",
      "balanceOfLandOwner(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfStaking(_account: Address): BigInt {
    let result = super.call(
      "balanceOfStaking",
      "balanceOfStaking(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfStaking(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfStaking",
      "balanceOfStaking(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkRewardAvailable(_token: Address): boolean {
    let result = super.call(
      "checkRewardAvailable",
      "checkRewardAvailable(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBoolean();
  }

  try_checkRewardAvailable(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkRewardAvailable",
      "checkRewardAvailable(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  earned(_account: Address): BigInt {
    let result = super.call("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_earned(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  landVoteRate(): BigInt {
    let result = super.call("landVoteRate", "landVoteRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_landVoteRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("landVoteRate", "landVoteRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdateTime(): BigInt {
    let result = super.call("lastUpdateTime", "lastUpdateTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdateTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTime",
      "lastUpdateTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lock(): BigInt {
    let result = super.call("lock", "lock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lock", "lock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodEnd(): BigInt {
    let result = super.call("periodEnd", "periodEnd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodEnd", "periodEnd():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardDistributions(param0: Address): boolean {
    let result = super.call(
      "rewardDistributions",
      "rewardDistributions(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_rewardDistributions(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rewardDistributions",
      "rewardDistributions(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardPerToken(): BigInt {
    let result = super.call("rewardPerToken", "rewardPerToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStored(): BigInt {
    let result = super.call(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRate(): BigInt {
    let result = super.call("rewardRate", "rewardRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardRate", "rewardRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(param0: Address): BigInt {
    let result = super.call("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingLock(param0: Address): BigInt {
    let result = super.call("stakingLock", "stakingLock(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_stakingLock(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingLock",
      "stakingLock(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenVoteRate(): BigInt {
    let result = super.call("tokenVoteRate", "tokenVoteRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenVoteRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenVoteRate",
      "tokenVoteRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardPerTokenPaid(param0: Address): BigInt {
    let result = super.call(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userRewardPerTokenPaid(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vote(): Address {
    let result = super.call("vote", "vote():(address)", []);

    return result[0].toAddress();
  }

  try_vote(): ethereum.CallResult<Address> {
    let result = super.tryCall("vote", "vote():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddRewardDistributionCall extends ethereum.Call {
  get inputs(): AddRewardDistributionCall__Inputs {
    return new AddRewardDistributionCall__Inputs(this);
  }

  get outputs(): AddRewardDistributionCall__Outputs {
    return new AddRewardDistributionCall__Outputs(this);
  }
}

export class AddRewardDistributionCall__Inputs {
  _call: AddRewardDistributionCall;

  constructor(call: AddRewardDistributionCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRewardDistributionCall__Outputs {
  _call: AddRewardDistributionCall;

  constructor(call: AddRewardDistributionCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _reward(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveRewardDistributionCall extends ethereum.Call {
  get inputs(): RemoveRewardDistributionCall__Inputs {
    return new RemoveRewardDistributionCall__Inputs(this);
  }

  get outputs(): RemoveRewardDistributionCall__Outputs {
    return new RemoveRewardDistributionCall__Outputs(this);
  }
}

export class RemoveRewardDistributionCall__Inputs {
  _call: RemoveRewardDistributionCall;

  constructor(call: RemoveRewardDistributionCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRewardDistributionCall__Outputs {
  _call: RemoveRewardDistributionCall;

  constructor(call: RemoveRewardDistributionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RewardAmountCall extends ethereum.Call {
  get inputs(): RewardAmountCall__Inputs {
    return new RewardAmountCall__Inputs(this);
  }

  get outputs(): RewardAmountCall__Outputs {
    return new RewardAmountCall__Outputs(this);
  }
}

export class RewardAmountCall__Inputs {
  _call: RewardAmountCall;

  constructor(call: RewardAmountCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RewardAmountCall__Outputs {
  _call: RewardAmountCall;

  constructor(call: RewardAmountCall) {
    this._call = call;
  }
}

export class SeizeCall extends ethereum.Call {
  get inputs(): SeizeCall__Inputs {
    return new SeizeCall__Inputs(this);
  }

  get outputs(): SeizeCall__Outputs {
    return new SeizeCall__Outputs(this);
  }
}

export class SeizeCall__Inputs {
  _call: SeizeCall;

  constructor(call: SeizeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SeizeCall__Outputs {
  _call: SeizeCall;

  constructor(call: SeizeCall) {
    this._call = call;
  }
}

export class SetApostleVoteRateCall extends ethereum.Call {
  get inputs(): SetApostleVoteRateCall__Inputs {
    return new SetApostleVoteRateCall__Inputs(this);
  }

  get outputs(): SetApostleVoteRateCall__Outputs {
    return new SetApostleVoteRateCall__Outputs(this);
  }
}

export class SetApostleVoteRateCall__Inputs {
  _call: SetApostleVoteRateCall;

  constructor(call: SetApostleVoteRateCall) {
    this._call = call;
  }

  get _apostleVoteRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetApostleVoteRateCall__Outputs {
  _call: SetApostleVoteRateCall;

  constructor(call: SetApostleVoteRateCall) {
    this._call = call;
  }
}

export class SetLandVoteRateCall extends ethereum.Call {
  get inputs(): SetLandVoteRateCall__Inputs {
    return new SetLandVoteRateCall__Inputs(this);
  }

  get outputs(): SetLandVoteRateCall__Outputs {
    return new SetLandVoteRateCall__Outputs(this);
  }
}

export class SetLandVoteRateCall__Inputs {
  _call: SetLandVoteRateCall;

  constructor(call: SetLandVoteRateCall) {
    this._call = call;
  }

  get _landVoteRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLandVoteRateCall__Outputs {
  _call: SetLandVoteRateCall;

  constructor(call: SetLandVoteRateCall) {
    this._call = call;
  }
}

export class SetLockCall extends ethereum.Call {
  get inputs(): SetLockCall__Inputs {
    return new SetLockCall__Inputs(this);
  }

  get outputs(): SetLockCall__Outputs {
    return new SetLockCall__Outputs(this);
  }
}

export class SetLockCall__Inputs {
  _call: SetLockCall;

  constructor(call: SetLockCall) {
    this._call = call;
  }

  get _lock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLockCall__Outputs {
  _call: SetLockCall;

  constructor(call: SetLockCall) {
    this._call = call;
  }
}

export class SetTokenVoteRateCall extends ethereum.Call {
  get inputs(): SetTokenVoteRateCall__Inputs {
    return new SetTokenVoteRateCall__Inputs(this);
  }

  get outputs(): SetTokenVoteRateCall__Outputs {
    return new SetTokenVoteRateCall__Outputs(this);
  }
}

export class SetTokenVoteRateCall__Inputs {
  _call: SetTokenVoteRateCall;

  constructor(call: SetTokenVoteRateCall) {
    this._call = call;
  }

  get _tokenVoteRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTokenVoteRateCall__Outputs {
  _call: SetTokenVoteRateCall;

  constructor(call: SetTokenVoteRateCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawWithRewardCall extends ethereum.Call {
  get inputs(): WithdrawWithRewardCall__Inputs {
    return new WithdrawWithRewardCall__Inputs(this);
  }

  get outputs(): WithdrawWithRewardCall__Outputs {
    return new WithdrawWithRewardCall__Outputs(this);
  }
}

export class WithdrawWithRewardCall__Inputs {
  _call: WithdrawWithRewardCall;

  constructor(call: WithdrawWithRewardCall) {
    this._call = call;
  }
}

export class WithdrawWithRewardCall__Outputs {
  _call: WithdrawWithRewardCall;

  constructor(call: WithdrawWithRewardCall) {
    this._call = call;
  }
}
